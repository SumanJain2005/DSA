the thing is why we must prefer unordered maps over maps is simply time complexity, maps has time complexity of O(log N), while for unordered map it is O(1) for best and average and for the worst case it is O(n), why is unordered map preffered? it also has something to deal with collisions to hit the worst case. 
The concept is we for example give a condition that yes we are not allowed to store more than 0-9 in the hashed map data, but the user can pass any thing right? Yes! So how do we deal with it? We simply mod the number by 10 and count the remainder, like the input is {2 , 139 , 146, 7 , 9} => the hashed output will be { 2 -> 1 , 9 ->2 , 6 ->1 , 7 -> 1}, Now this raises a lot of questions that how can we segregate the values, or how is the number even justified? as 9 stores 2 but actually those are two different numbers and cannot be stored together, so how to fix that? We chain that, We simply chain the data in the corresponding arrays, where the head of the ll is the linked with the arrayIndex and then we simply keep on pushing the data in sorted order and then we simply use a binary search which takes very minimal time to find out the number of datas. 
What is Collision then? Nothing but all data entering a single slot :). And only in this case it hits O(n), and dataset should be like {18 , 28 , 138 ,148 , 1008 , 248} where all these will be stored in 8 and this is called collision.
In maps we can store any data type as key, it may be custom or primitive but in unordered map we cant do that and only primitive data types can be stored.